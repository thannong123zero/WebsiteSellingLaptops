// <auto-generated />
using System;
using DataAccess.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220717030151_InitialModel")]
    partial class InitialModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataAccess.EntityModel.AccountModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("DataAccess.EntityModel.BillTypeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("BillType");
                });

            modelBuilder.Entity("DataAccess.EntityModel.BuyBillModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 7, 17, 10, 1, 51, 219, DateTimeKind.Local).AddTicks(2851));

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProducerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalMoney")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ProducerId");

                    b.ToTable("BuyBill");
                });

            modelBuilder.Entity("DataAccess.EntityModel.CartModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 7, 17, 10, 1, 51, 219, DateTimeKind.Local).AddTicks(7119));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalMoney")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("DataAccess.EntityModel.CategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("DataAccess.EntityModel.CustomerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("Gmail")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("NumberPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("DataAccess.EntityModel.DetailBuyBillModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BuyBillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BuyBillId");

                    b.HasIndex("ProductId");

                    b.ToTable("DetailBuyBill");
                });

            modelBuilder.Entity("DataAccess.EntityModel.DetailCartModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("DetailCart");
                });

            modelBuilder.Entity("DataAccess.EntityModel.DetailGoodsBillModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GoodsBillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GoodsBillId");

                    b.HasIndex("ProductId");

                    b.ToTable("DetailGoodsBill");
                });

            modelBuilder.Entity("DataAccess.EntityModel.DetailSaleBillModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SaleBillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleBillId");

                    b.ToTable("DetailSaleBill");
                });

            modelBuilder.Entity("DataAccess.EntityModel.DetailStockModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WareHourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WareHourseId");

                    b.ToTable("DetailStock");
                });

            modelBuilder.Entity("DataAccess.EntityModel.GoodsBillModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BillTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 7, 17, 10, 1, 51, 221, DateTimeKind.Local).AddTicks(4295));

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<Guid>("WareHourseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BillTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("WareHourseId");

                    b.ToTable("GoodsBill");
                });

            modelBuilder.Entity("DataAccess.EntityModel.ManufactoringModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MadeIn")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.HasKey("Id");

                    b.ToTable("Manufactoring");
                });

            modelBuilder.Entity("DataAccess.EntityModel.MethodKindModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MethodKind");
                });

            modelBuilder.Entity("DataAccess.EntityModel.PaymentMethodModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("DataAccess.EntityModel.ProducerModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("NumberPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Producer");
                });

            modelBuilder.Entity("DataAccess.EntityModel.ProductModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 7, 17, 10, 1, 51, 221, DateTimeKind.Local).AddTicks(9859));

                    b.Property<string>("Descrition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid>("ManufactorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<Guid>("SubCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("WarrantyPeriod")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ManufactorId");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("DataAccess.EntityModel.ProductPriceModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 7, 17, 10, 1, 51, 222, DateTimeKind.Local).AddTicks(3320));

                    b.Property<int>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrice");
                });

            modelBuilder.Entity("DataAccess.EntityModel.ReceiptModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CollectMoney")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 7, 17, 10, 1, 51, 222, DateTimeKind.Local).AddTicks(4521));

                    b.Property<Guid>("SaleBillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ValletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SaleBillId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("ValletId");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("DataAccess.EntityModel.RoleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DataAccess.EntityModel.SaleBillModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 7, 17, 10, 1, 51, 222, DateTimeKind.Local).AddTicks(6309));

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TotalValue")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("SaleBill");
                });

            modelBuilder.Entity("DataAccess.EntityModel.SubCategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategory");
                });

            modelBuilder.Entity("DataAccess.EntityModel.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("Avatatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2022, 7, 17, 10, 1, 51, 223, DateTimeKind.Local).AddTicks(3054));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("NumberPhone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DataAccess.EntityModel.ValletModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Money")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vallet");
                });

            modelBuilder.Entity("DataAccess.EntityModel.WareHourseModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("WareHourse");
                });

            modelBuilder.Entity("DataAccess.EntityModel.WithdrawMoneyModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MethodKindId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasMaxLength(225)
                        .HasColumnType("nvarchar(225)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ValletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MethodKindId");

                    b.HasIndex("UserId");

                    b.HasIndex("ValletId");

                    b.ToTable("PaySip");
                });

            modelBuilder.Entity("DataAccess.EntityModel.AccountModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.UserModel", "User")
                        .WithOne("Account")
                        .HasForeignKey("DataAccess.EntityModel.AccountModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.EntityModel.BuyBillModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.UserModel", "User")
                        .WithMany("BuyBills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.PaymentMethodModel", "PaymentMethod")
                        .WithMany("BuyBills")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.ProducerModel", "Producer")
                        .WithMany("BuyBills")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("Producer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.EntityModel.CustomerModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.CartModel", "Cart")
                        .WithOne("Customer")
                        .HasForeignKey("DataAccess.EntityModel.CustomerModel", "Id")
                        .HasPrincipalKey("DataAccess.EntityModel.CartModel", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("DataAccess.EntityModel.DetailBuyBillModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.BuyBillModel", "BuyBill")
                        .WithMany("DetailBuyBills")
                        .HasForeignKey("BuyBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.ProductModel", "Product")
                        .WithMany("DetailBuyBills")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BuyBill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccess.EntityModel.DetailCartModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.CartModel", "Cart")
                        .WithMany("DetailCarts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.ProductModel", "Product")
                        .WithMany("DetailCarts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccess.EntityModel.DetailGoodsBillModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.GoodsBillModel", "GoodsBill")
                        .WithMany("DetailGoodsBills")
                        .HasForeignKey("GoodsBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.ProductModel", "Product")
                        .WithMany("DetailGoodsBills")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("GoodsBill");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccess.EntityModel.DetailSaleBillModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.ProductModel", "Product")
                        .WithMany("DetailSaleBills")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.SaleBillModel", "SaleBill")
                        .WithMany("DetailSaleBills")
                        .HasForeignKey("SaleBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SaleBill");
                });

            modelBuilder.Entity("DataAccess.EntityModel.DetailStockModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.ProductModel", "Product")
                        .WithMany("DetailStocks")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.WareHourseModel", "WareHourse")
                        .WithMany("DetailStocks")
                        .HasForeignKey("WareHourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("WareHourse");
                });

            modelBuilder.Entity("DataAccess.EntityModel.GoodsBillModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.BillTypeModel", "BillType")
                        .WithMany("GoodsBills")
                        .HasForeignKey("BillTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.UserModel", "User")
                        .WithMany("GoodsBills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.WareHourseModel", "WareHourse")
                        .WithMany("GoodsBills")
                        .HasForeignKey("WareHourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillType");

                    b.Navigation("User");

                    b.Navigation("WareHourse");
                });

            modelBuilder.Entity("DataAccess.EntityModel.ProductModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.ManufactoringModel", "Manufactoring")
                        .WithMany("Products")
                        .HasForeignKey("ManufactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.SubCategoryModel", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manufactoring");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("DataAccess.EntityModel.ProductPriceModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.ProductModel", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccess.EntityModel.ReceiptModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.SaleBillModel", "SaleBill")
                        .WithOne("Receipt")
                        .HasForeignKey("DataAccess.EntityModel.ReceiptModel", "SaleBillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.UserModel", "User")
                        .WithOne("Receipt")
                        .HasForeignKey("DataAccess.EntityModel.ReceiptModel", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.ValletModel", "Vallet")
                        .WithMany("Receipts")
                        .HasForeignKey("ValletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SaleBill");

                    b.Navigation("User");

                    b.Navigation("Vallet");
                });

            modelBuilder.Entity("DataAccess.EntityModel.SaleBillModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.CustomerModel", "Customer")
                        .WithMany("SaleBills")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.UserModel", "User")
                        .WithMany("SaleBills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.PaymentMethodModel", "PaymentMethod")
                        .WithMany("SaleBills")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.EntityModel.SubCategoryModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.CategoryModel", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DataAccess.EntityModel.UserModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.RoleModel", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.EntityModel.WithdrawMoneyModel", b =>
                {
                    b.HasOne("DataAccess.EntityModel.MethodKindModel", "MethodKind")
                        .WithMany("WithdrawMoneys")
                        .HasForeignKey("MethodKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.UserModel", "User")
                        .WithMany("WithdrawMoneys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.EntityModel.ValletModel", "Vallet")
                        .WithMany("WithdrawMoneys")
                        .HasForeignKey("ValletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MethodKind");

                    b.Navigation("User");

                    b.Navigation("Vallet");
                });

            modelBuilder.Entity("DataAccess.EntityModel.BillTypeModel", b =>
                {
                    b.Navigation("GoodsBills");
                });

            modelBuilder.Entity("DataAccess.EntityModel.BuyBillModel", b =>
                {
                    b.Navigation("DetailBuyBills");
                });

            modelBuilder.Entity("DataAccess.EntityModel.CartModel", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("DetailCarts");
                });

            modelBuilder.Entity("DataAccess.EntityModel.CategoryModel", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("DataAccess.EntityModel.CustomerModel", b =>
                {
                    b.Navigation("SaleBills");
                });

            modelBuilder.Entity("DataAccess.EntityModel.GoodsBillModel", b =>
                {
                    b.Navigation("DetailGoodsBills");
                });

            modelBuilder.Entity("DataAccess.EntityModel.ManufactoringModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataAccess.EntityModel.MethodKindModel", b =>
                {
                    b.Navigation("WithdrawMoneys");
                });

            modelBuilder.Entity("DataAccess.EntityModel.PaymentMethodModel", b =>
                {
                    b.Navigation("BuyBills");

                    b.Navigation("SaleBills");
                });

            modelBuilder.Entity("DataAccess.EntityModel.ProducerModel", b =>
                {
                    b.Navigation("BuyBills");
                });

            modelBuilder.Entity("DataAccess.EntityModel.ProductModel", b =>
                {
                    b.Navigation("DetailBuyBills");

                    b.Navigation("DetailCarts");

                    b.Navigation("DetailGoodsBills");

                    b.Navigation("DetailSaleBills");

                    b.Navigation("DetailStocks");

                    b.Navigation("ProductPrices");
                });

            modelBuilder.Entity("DataAccess.EntityModel.RoleModel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccess.EntityModel.SaleBillModel", b =>
                {
                    b.Navigation("DetailSaleBills");

                    b.Navigation("Receipt")
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccess.EntityModel.SubCategoryModel", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("DataAccess.EntityModel.UserModel", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("BuyBills");

                    b.Navigation("GoodsBills");

                    b.Navigation("Receipt")
                        .IsRequired();

                    b.Navigation("SaleBills");

                    b.Navigation("WithdrawMoneys");
                });

            modelBuilder.Entity("DataAccess.EntityModel.ValletModel", b =>
                {
                    b.Navigation("Receipts");

                    b.Navigation("WithdrawMoneys");
                });

            modelBuilder.Entity("DataAccess.EntityModel.WareHourseModel", b =>
                {
                    b.Navigation("DetailStocks");

                    b.Navigation("GoodsBills");
                });
#pragma warning restore 612, 618
        }
    }
}
